%package "org.mc.parser";

%import "org.mc.lexer.*";
%import "org.mc.parser.*";
%import "java.io.IOException";
%import "scala.collection.immutable.List";
%import "scala.Option";

%class "McParser";

%embed {:
    private static final class PackedType<T> extends beaver.Symbol {
        public final T value;

        public PackedType(T value) {
            this.value = value;
        }
    }

    private static <T> PackedType<T> pack(T value) {
        return new PackedType<T>(value);
    }

    private static <T> T unpack(PackedType<T> value) {
        return value.value;
    }

    private static <T> T unpack(beaver.Symbol symbol) {
        return ((PackedType<T>)symbol.value).value;
    }

    private String source = null;

    public McParser(ParserListener parserListener) {
        this();
        report = (Events)parserListener;
    }

    public Object parse(beaver.Scanner scanner, String source) throws IOException, beaver.Parser.Exception {
        this.source = source;
        return super.parse(scanner);
    }

    private String getTokenText(TokenPosition position) {
        return source.substring(position.beginOffset(), position.endOffset());
    }

    private String getTokenText(beaver.Symbol symbol) {
        return getTokenText(getTokenPosition(symbol));
    }

    private TokenPosition getTokenPosition(beaver.Symbol symbol) {
        return ((Token)symbol.value).position();
    }
:};

%terminals ID, CHAR, STRING, DEC_NUMBER, HEX_NUMBER, BIN_NUMBER, FLOAT_NUMBER, HEX_FLOAT_NUMBER, DOUBLE_NUMBER, HEX_DOUBLE_NUMBER;
%terminals OPEN_PAREN, CLOSE_PAREN, OPEN_BRACE, CLOSE_BRACE;
%terminals DOT, SEMICOLON, COMMA, ASSIGN, PLUS, MINUS, TIMES, DIVIDE;
%terminals VAR, VAL, DEF, CLASS, INTERFACE, PRIVATE, PROTECTED, FINAL, EXTENDS, IMPLEMENTS, OVERRIDE, AS, IS, THIS, SUPER, MODULE, IMPORT;

%left OPEN_PAREN, CLOSE_PAREN;
%right UNARY_MINUS, UNARY_PLUS;
%left TIMES, DIVIDE;
%left PLUS, MINUS, TIMES, DIVIDE;
%right ASSIGN;

%typeof ID = "Ast.IdLiteral";
%typeof STRING = "Ast.StringLiteral";
%typeof CHAR = "Ast.CharLiteral";
%typeof DEC_NUMBER = "Ast.DecNumberLiteral";
%typeof HEX_NUMBER = "Ast.HexNumberLiteral";
%typeof BIN_NUMBER = "Ast.BinNumberLiteral";
%typeof FLOAT_NUMBER = "Ast.FloatLiteral";
%typeof HEX_FLOAT_NUMBER = "Ast.HexFloatLiteral";
%typeof DOUBLE_NUMBER = "Ast.DoubleLiteral";
%typeof HEX_DOUBLE_NUMBER = "Ast.HexDoubleLiteral";

%typeof compilation_module = "Ast.Module";

%typeof expr = "Ast.Expression";
%typeof sub_expr = "Ast.Expression";
%typeof const_literal = "Ast.Literal";

%typeof statement = "Ast.Statement";
%typeof modifier = "Ast.Modifier";
%typeof module_statement = "Ast.ModuleStatement";
%typeof import_statement = "Ast.ImportStatement";
%typeof type_declaration = "Ast.TypeDeclaration";
%typeof class_declaration = "Ast.ClassDeclaration";
%typeof base_class = "PackedType<String>";
%typeof interfaces = "PackedType<List<String>>";
%typeof interfaces_types_list = "PackedType<List<String>>";
%typeof class_body = "Object"; // TODO:

%typeof name = "PackedType<String>";
%typeof simple_name = "PackedType<String>";
%typeof qualified_name = "PackedType<String>";

%goal compilation_module;

compilation_module
    = statement.statements* {: return new Ast.Module(ScalaUtils.asList(statements)); :}
    ;

//= expr.e* {: return new Ast.ExpressionList(ScalaUtils.makeList(e)); :}

expr
    = sub_expr.e SEMICOLON {: return e; :}
    | SEMICOLON            {: return new Ast.EmptyExpression(); :}
    | error SEMICOLON      {: return new Ast.ErrorExpression(); :}
    ;

sub_expr
    = sub_expr.left PLUS sub_expr.right   {: return new Ast.AddExpression(left, right); :}
    | sub_expr.left MINUS sub_expr.right  {: return new Ast.SubExpression(left, right); :}
    | sub_expr.left TIMES sub_expr.right  {: return new Ast.MulExpression(left, right); :}
    | sub_expr.left DIVIDE sub_expr.right {: return new Ast.DivExpression(left, right); :}
    | MINUS sub_expr.e @ UNARY_MINUS      {: return new Ast.MinusExpression(e); :}
    | PLUS sub_expr.e @ UNARY_PLUS        {: return new Ast.PlusExpression(e); :}
    | OPEN_PAREN sub_expr.e CLOSE_PAREN   {: return new Ast.ParenthesizedExpression(e); :}
    | ID.value                            {: return new Ast.IdLiteral(getTokenText(value)); :}
    | const_literal.literal               {: return literal; :}
    ;

const_literal
    = STRING.value            {: return new Ast.StringLiteral(getTokenText(value)); :}
    | CHAR.value              {: return new Ast.CharLiteral(getTokenText(value)); :}
    | DEC_NUMBER.value        {: return new Ast.DecNumberLiteral(getTokenText(value)); :}
    | HEX_NUMBER.value        {: return new Ast.HexNumberLiteral(getTokenText(value)); :}
    | BIN_NUMBER.value        {: return new Ast.BinNumberLiteral(getTokenText(value)); :}
    | FLOAT_NUMBER.value      {: return new Ast.FloatLiteral(getTokenText(value)); :}
    | HEX_FLOAT_NUMBER.value  {: return new Ast.HexFloatLiteral(getTokenText(value)); :}
    | DOUBLE_NUMBER.value     {: return new Ast.DoubleLiteral(getTokenText(value)); :}
    | HEX_DOUBLE_NUMBER.value {: return new Ast.HexDoubleLiteral(getTokenText(value)); :}
    ;

statement
    = module_statement.stmt {: return stmt; :}
    | import_statement.stmt {: return stmt; :}
    | type_declaration.stmt {: return stmt; :}
    | error SEMICOLON       {: return new Ast.ErrorStatement(); :}
    ;

modifier
    = PRIVATE   {: return new Ast.Private(); :}
    | PROTECTED {: return new Ast.Protected(); :}
    | FINAL     {: return new Ast.Final(); :}
    ;

module_statement
    = MODULE name SEMICOLON {: return new Ast.ModuleStatement(); :}
    ;

import_statement
    = IMPORT name SEMICOLON {: return new Ast.ImportStatement(); :}
    ;

type_declaration
    = class_declaration.declaration {: return declaration; :}
    | error CLOSE_BRACE SEMICOLON   {: return new Ast.ErrorTypeDeclaration(); :}
    ;

class_declaration
    = modifier.modifiers* CLASS ID.name base_class.base? interfaces.interfaces? class_body.body
      {:
        Option<String> baseClass = (unpack(base) == null ? ScalaUtils.<String>makeNone() : ScalaUtils.makeSome(unpack(base)));
        List<String> interfacesList = (unpack(interfaces) == null ? ScalaUtils.<String>makeList() : unpack(interfaces));
        return new Ast.ClassDeclaration(name.text(), ScalaUtils.asList(modifiers), baseClass, interfacesList);
      :}
    ;

base_class
    = EXTENDS ID.name {: return pack(name.text()); :}
    ;

interfaces
    = IMPLEMENTS interfaces_types_list.list {: return list; :}
    ;

interfaces_types_list
    = ID.name                                  {: return pack(ScalaUtils.makeList(name.text())); :}
    | interfaces_types_list.list COMMA ID.name {: return pack(ScalaUtils.put(unpack(list), name.text())); :}
    ;

class_body
    = OPEN_BRACE expr* CLOSE_BRACE SEMICOLON {: return null; :}
    ;

name
    = simple_name.name    {: return name; :}
    | qualified_name.name {: return name; :}
    ;

simple_name
    = ID.name {: return pack(name.text()); :}
    ;

qualified_name
    = name.name DOT ID.suffix {: return pack(unpack(name) + "." + suffix.text()); :}
    ;